{
  "api": {
    "name": "backgroundrunPlugin",
    "slug": "backgroundrunplugin",
    "docs": "",
    "tags": [],
    "methods": [
      {
        "name": "echo",
        "signature": "(options: { value: string; }) => Promise<{ value: string; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: string; }"
          }
        ],
        "returns": "Promise<{ value: string; }>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "echo"
      },
      {
        "name": "showNotificationOnAppClose",
        "signature": "(options: GpsOptions) => Promise<GpsOptions>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "GpsOptions"
          }
        ],
        "returns": "Promise<GpsOptions>",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "GpsOptions"
        ],
        "slug": "shownotificationonappclose"
      },
      {
        "name": "stopNotificationService",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "stopnotificationservice"
      },
      {
        "name": "checkPermissionsService",
        "signature": "(options: { value: boolean; }) => Promise<{ value: boolean; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: boolean; }"
          }
        ],
        "returns": "Promise<{ value: boolean; }>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "checkpermissionsservice"
      },
      {
        "name": "ignoringBatteryOptimizationsService",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "ignoringbatteryoptimizationsservice"
      },
      {
        "name": "requestBatteryOptimizations",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "requestbatteryoptimizations"
      },
      {
        "name": "requestNotificationPermission",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "requestnotificationpermission"
      },
      {
        "name": "checkUsageStatsNotificationPausePermission",
        "signature": "(options: { value: boolean; }) => Promise<{ value: boolean; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: boolean; }"
          }
        ],
        "returns": "Promise<{ value: boolean; }>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "checkusagestatsnotificationpausepermission"
      },
      {
        "name": "checkManageAppPermissionsPermission",
        "signature": "(options: { value: boolean; }) => Promise<{ value: boolean; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ value: boolean; }"
          }
        ],
        "returns": "Promise<{ value: boolean; }>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "checkmanageapppermissionspermission"
      },
      {
        "name": "checkNotificationPermission",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "checknotificationpermission"
      },
      {
        "name": "openNotificationSettings",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "opennotificationsettings"
      },
      {
        "name": "acquireWakeLock",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "acquirewakelock"
      },
      {
        "name": "releaseWakeLock",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "releasewakelock"
      },
      {
        "name": "openLocationSettings",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "openlocationsettings"
      },
      {
        "name": "addAppResumedListener",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "addappresumedlistener"
      },
      {
        "name": "removeAppResumedListener",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "removeappresumedlistener"
      }
    ],
    "properties": []
  },
  "interfaces": [
    {
      "name": "GpsOptions",
      "slug": "gpsoptions",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "url",
          "tags": [],
          "docs": "",
          "complexTypes": [
            "String"
          ],
          "type": "String"
        },
        {
          "name": "id1",
          "tags": [],
          "docs": "",
          "complexTypes": [
            "String"
          ],
          "type": "String"
        },
        {
          "name": "id2",
          "tags": [],
          "docs": "",
          "complexTypes": [
            "String"
          ],
          "type": "String"
        },
        {
          "name": "id3",
          "tags": [],
          "docs": "",
          "complexTypes": [
            "String"
          ],
          "type": "String"
        },
        {
          "name": "id4",
          "tags": [],
          "docs": "",
          "complexTypes": [
            "String"
          ],
          "type": "String"
        },
        {
          "name": "title",
          "tags": [],
          "docs": "",
          "complexTypes": [
            "String"
          ],
          "type": "String"
        },
        {
          "name": "timerGps",
          "tags": [],
          "docs": "",
          "complexTypes": [
            "Number"
          ],
          "type": "Number"
        },
        {
          "name": "coordinatesShow",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "boolean"
        },
        {
          "name": "timeShow",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "boolean"
        }
      ]
    },
    {
      "name": "String",
      "slug": "string",
      "docs": "Allows manipulation and formatting of text strings and determination and location of substrings within strings.",
      "tags": [],
      "methods": [
        {
          "name": "toString",
          "signature": "() => string",
          "parameters": [],
          "returns": "string",
          "tags": [],
          "docs": "Returns a string representation of a string.",
          "complexTypes": [],
          "slug": "tostring"
        },
        {
          "name": "charAt",
          "signature": "(pos: number) => string",
          "parameters": [
            {
              "name": "pos",
              "docs": "The zero-based index of the desired character.",
              "type": "number"
            }
          ],
          "returns": "string",
          "tags": [
            {
              "name": "param",
              "text": "pos The zero-based index of the desired character."
            }
          ],
          "docs": "Returns the character at the specified index.",
          "complexTypes": [],
          "slug": "charat"
        },
        {
          "name": "charCodeAt",
          "signature": "(index: number) => number",
          "parameters": [
            {
              "name": "index",
              "docs": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
              "type": "number"
            }
          ],
          "returns": "number",
          "tags": [
            {
              "name": "param",
              "text": "index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
            }
          ],
          "docs": "Returns the Unicode value of the character at the specified location.",
          "complexTypes": [],
          "slug": "charcodeat"
        },
        {
          "name": "concat",
          "signature": "(...strings: string[]) => string",
          "parameters": [
            {
              "name": "strings",
              "docs": "The strings to append to the end of the string.",
              "type": "string[]"
            }
          ],
          "returns": "string",
          "tags": [
            {
              "name": "param",
              "text": "strings The strings to append to the end of the string."
            }
          ],
          "docs": "Returns a string that contains the concatenation of two or more strings.",
          "complexTypes": [],
          "slug": "concat"
        },
        {
          "name": "indexOf",
          "signature": "(searchString: string, position?: number | undefined) => number",
          "parameters": [
            {
              "name": "searchString",
              "docs": "The substring to search for in the string",
              "type": "string"
            },
            {
              "name": "position",
              "docs": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.",
              "type": "number | undefined"
            }
          ],
          "returns": "number",
          "tags": [
            {
              "name": "param",
              "text": "searchString The substring to search for in the string"
            },
            {
              "name": "param",
              "text": "position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
            }
          ],
          "docs": "Returns the position of the first occurrence of a substring.",
          "complexTypes": [],
          "slug": "indexof"
        },
        {
          "name": "lastIndexOf",
          "signature": "(searchString: string, position?: number | undefined) => number",
          "parameters": [
            {
              "name": "searchString",
              "docs": "The substring to search for.",
              "type": "string"
            },
            {
              "name": "position",
              "docs": "The index at which to begin searching. If omitted, the search begins at the end of the string.",
              "type": "number | undefined"
            }
          ],
          "returns": "number",
          "tags": [
            {
              "name": "param",
              "text": "searchString The substring to search for."
            },
            {
              "name": "param",
              "text": "position The index at which to begin searching. If omitted, the search begins at the end of the string."
            }
          ],
          "docs": "Returns the last occurrence of a substring in the string.",
          "complexTypes": [],
          "slug": "lastindexof"
        },
        {
          "name": "localeCompare",
          "signature": "(that: string) => number",
          "parameters": [
            {
              "name": "that",
              "docs": "String to compare to target string",
              "type": "string"
            }
          ],
          "returns": "number",
          "tags": [
            {
              "name": "param",
              "text": "that String to compare to target string"
            }
          ],
          "docs": "Determines whether two strings are equivalent in the current locale.",
          "complexTypes": [],
          "slug": "localecompare"
        },
        {
          "name": "match",
          "signature": "(regexp: string | RegExp) => RegExpMatchArray | null",
          "parameters": [
            {
              "name": "regexp",
              "docs": "A variable name or string literal containing the regular expression pattern and flags.",
              "type": "string | RegExp"
            }
          ],
          "returns": "RegExpMatchArray | null",
          "tags": [
            {
              "name": "param",
              "text": "regexp A variable name or string literal containing the regular expression pattern and flags."
            }
          ],
          "docs": "Matches a string with a regular expression, and returns an array containing the results of that search.",
          "complexTypes": [
            "RegExpMatchArray",
            "RegExp"
          ],
          "slug": "match"
        },
        {
          "name": "replace",
          "signature": "(searchValue: string | RegExp, replaceValue: string) => string",
          "parameters": [
            {
              "name": "searchValue",
              "docs": "A string to search for.",
              "type": "string | RegExp"
            },
            {
              "name": "replaceValue",
              "docs": "A string containing the text to replace for every successful match of searchValue in this string.",
              "type": "string"
            }
          ],
          "returns": "string",
          "tags": [
            {
              "name": "param",
              "text": "searchValue A string to search for."
            },
            {
              "name": "param",
              "text": "replaceValue A string containing the text to replace for every successful match of searchValue in this string."
            }
          ],
          "docs": "Replaces text in a string, using a regular expression or search string.",
          "complexTypes": [
            "RegExp"
          ],
          "slug": "replace"
        },
        {
          "name": "replace",
          "signature": "(searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string) => string",
          "parameters": [
            {
              "name": "searchValue",
              "docs": "A string to search for.",
              "type": "string | RegExp"
            },
            {
              "name": "replacer",
              "docs": "A function that returns the replacement text.",
              "type": "(substring: string, ...args: any[]) => string"
            }
          ],
          "returns": "string",
          "tags": [
            {
              "name": "param",
              "text": "searchValue A string to search for."
            },
            {
              "name": "param",
              "text": "replacer A function that returns the replacement text."
            }
          ],
          "docs": "Replaces text in a string, using a regular expression or search string.",
          "complexTypes": [
            "RegExp"
          ],
          "slug": "replace"
        },
        {
          "name": "search",
          "signature": "(regexp: string | RegExp) => number",
          "parameters": [
            {
              "name": "regexp",
              "docs": "The regular expression pattern and applicable flags.",
              "type": "string | RegExp"
            }
          ],
          "returns": "number",
          "tags": [
            {
              "name": "param",
              "text": "regexp The regular expression pattern and applicable flags."
            }
          ],
          "docs": "Finds the first substring match in a regular expression search.",
          "complexTypes": [
            "RegExp"
          ],
          "slug": "search"
        },
        {
          "name": "slice",
          "signature": "(start?: number | undefined, end?: number | undefined) => string",
          "parameters": [
            {
              "name": "start",
              "docs": "The index to the beginning of the specified portion of stringObj.",
              "type": "number | undefined"
            },
            {
              "name": "end",
              "docs": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\r\nIf this value is not specified, the substring continues to the end of stringObj.",
              "type": "number | undefined"
            }
          ],
          "returns": "string",
          "tags": [
            {
              "name": "param",
              "text": "start The index to the beginning of the specified portion of stringObj."
            },
            {
              "name": "param",
              "text": "end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\r\nIf this value is not specified, the substring continues to the end of stringObj."
            }
          ],
          "docs": "Returns a section of a string.",
          "complexTypes": [],
          "slug": "slice"
        },
        {
          "name": "split",
          "signature": "(separator: string | RegExp, limit?: number | undefined) => string[]",
          "parameters": [
            {
              "name": "separator",
              "docs": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.",
              "type": "string | RegExp"
            },
            {
              "name": "limit",
              "docs": "A value used to limit the number of elements returned in the array.",
              "type": "number | undefined"
            }
          ],
          "returns": "string[]",
          "tags": [
            {
              "name": "param",
              "text": "separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
            },
            {
              "name": "param",
              "text": "limit A value used to limit the number of elements returned in the array."
            }
          ],
          "docs": "Split a string into substrings using the specified separator and return them as an array.",
          "complexTypes": [
            "RegExp"
          ],
          "slug": "split"
        },
        {
          "name": "substring",
          "signature": "(start: number, end?: number | undefined) => string",
          "parameters": [
            {
              "name": "start",
              "docs": "The zero-based index number indicating the beginning of the substring.",
              "type": "number"
            },
            {
              "name": "end",
              "docs": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\r\nIf end is omitted, the characters from start through the end of the original string are returned.",
              "type": "number | undefined"
            }
          ],
          "returns": "string",
          "tags": [
            {
              "name": "param",
              "text": "start The zero-based index number indicating the beginning of the substring."
            },
            {
              "name": "param",
              "text": "end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\r\nIf end is omitted, the characters from start through the end of the original string are returned."
            }
          ],
          "docs": "Returns the substring at the specified location within a String object.",
          "complexTypes": [],
          "slug": "substring"
        },
        {
          "name": "toLowerCase",
          "signature": "() => string",
          "parameters": [],
          "returns": "string",
          "tags": [],
          "docs": "Converts all the alphabetic characters in a string to lowercase.",
          "complexTypes": [],
          "slug": "tolowercase"
        },
        {
          "name": "toLocaleLowerCase",
          "signature": "(locales?: string | string[] | undefined) => string",
          "parameters": [
            {
              "name": "locales",
              "docs": "",
              "type": "string | string[] | undefined"
            }
          ],
          "returns": "string",
          "tags": [],
          "docs": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
          "complexTypes": [],
          "slug": "tolocalelowercase"
        },
        {
          "name": "toUpperCase",
          "signature": "() => string",
          "parameters": [],
          "returns": "string",
          "tags": [],
          "docs": "Converts all the alphabetic characters in a string to uppercase.",
          "complexTypes": [],
          "slug": "touppercase"
        },
        {
          "name": "toLocaleUpperCase",
          "signature": "(locales?: string | string[] | undefined) => string",
          "parameters": [
            {
              "name": "locales",
              "docs": "",
              "type": "string | string[] | undefined"
            }
          ],
          "returns": "string",
          "tags": [],
          "docs": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
          "complexTypes": [],
          "slug": "tolocaleuppercase"
        },
        {
          "name": "trim",
          "signature": "() => string",
          "parameters": [],
          "returns": "string",
          "tags": [],
          "docs": "Removes the leading and trailing white space and line terminator characters from a string.",
          "complexTypes": [],
          "slug": "trim"
        },
        {
          "name": "substr",
          "signature": "(from: number, length?: number | undefined) => string",
          "parameters": [
            {
              "name": "from",
              "docs": "The starting position of the desired substring. The index of the first character in the string is zero.",
              "type": "number"
            },
            {
              "name": "length",
              "docs": "The number of characters to include in the returned substring.",
              "type": "number | undefined"
            }
          ],
          "returns": "string",
          "tags": [
            {
              "name": "param",
              "text": "from The starting position of the desired substring. The index of the first character in the string is zero."
            },
            {
              "name": "param",
              "text": "length The number of characters to include in the returned substring."
            }
          ],
          "docs": "Gets a substring beginning at the specified location and having the specified length.",
          "complexTypes": [],
          "slug": "substr"
        },
        {
          "name": "valueOf",
          "signature": "() => string",
          "parameters": [],
          "returns": "string",
          "tags": [],
          "docs": "Returns the primitive value of the specified object.",
          "complexTypes": [],
          "slug": "valueof"
        }
      ],
      "properties": [
        {
          "name": "length",
          "tags": [],
          "docs": "Returns the length of a String object.",
          "complexTypes": [],
          "type": "number"
        }
      ]
    },
    {
      "name": "RegExpMatchArray",
      "slug": "regexpmatcharray",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "index",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "number | undefined"
        },
        {
          "name": "input",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string | undefined"
        }
      ]
    },
    {
      "name": "RegExp",
      "slug": "regexp",
      "docs": "",
      "tags": [],
      "methods": [
        {
          "name": "exec",
          "signature": "(string: string) => RegExpExecArray | null",
          "parameters": [
            {
              "name": "string",
              "docs": "The String object or string literal on which to perform the search.",
              "type": "string"
            }
          ],
          "returns": "RegExpExecArray | null",
          "tags": [
            {
              "name": "param",
              "text": "string The String object or string literal on which to perform the search."
            }
          ],
          "docs": "Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.",
          "complexTypes": [
            "RegExpExecArray"
          ],
          "slug": "exec"
        },
        {
          "name": "test",
          "signature": "(string: string) => boolean",
          "parameters": [
            {
              "name": "string",
              "docs": "String on which to perform the search.",
              "type": "string"
            }
          ],
          "returns": "boolean",
          "tags": [
            {
              "name": "param",
              "text": "string String on which to perform the search."
            }
          ],
          "docs": "Returns a Boolean value that indicates whether or not a pattern exists in a searched string.",
          "complexTypes": [],
          "slug": "test"
        },
        {
          "name": "compile",
          "signature": "() => this",
          "parameters": [],
          "returns": "this",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "slug": "compile"
        }
      ],
      "properties": [
        {
          "name": "source",
          "tags": [],
          "docs": "Returns a copy of the text of the regular expression pattern. Read-only. The regExp argument is a Regular expression object. It can be a variable name or a literal.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "global",
          "tags": [],
          "docs": "Returns a Boolean value indicating the state of the global flag (g) used with a regular expression. Default is false. Read-only.",
          "complexTypes": [],
          "type": "boolean"
        },
        {
          "name": "ignoreCase",
          "tags": [],
          "docs": "Returns a Boolean value indicating the state of the ignoreCase flag (i) used with a regular expression. Default is false. Read-only.",
          "complexTypes": [],
          "type": "boolean"
        },
        {
          "name": "multiline",
          "tags": [],
          "docs": "Returns a Boolean value indicating the state of the multiline flag (m) used with a regular expression. Default is false. Read-only.",
          "complexTypes": [],
          "type": "boolean"
        },
        {
          "name": "lastIndex",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "number"
        }
      ]
    },
    {
      "name": "RegExpExecArray",
      "slug": "regexpexecarray",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "index",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "number"
        },
        {
          "name": "input",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string"
        }
      ]
    },
    {
      "name": "Number",
      "slug": "number",
      "docs": "An object that represents a number of any kind. All JavaScript numbers are 64-bit floating-point numbers.",
      "tags": [],
      "methods": [
        {
          "name": "toString",
          "signature": "(radix?: number | undefined) => string",
          "parameters": [
            {
              "name": "radix",
              "docs": "Specifies a radix for converting numeric values to strings. This value is only used for numbers.",
              "type": "number | undefined"
            }
          ],
          "returns": "string",
          "tags": [
            {
              "name": "param",
              "text": "radix Specifies a radix for converting numeric values to strings. This value is only used for numbers."
            }
          ],
          "docs": "Returns a string representation of an object.",
          "complexTypes": [],
          "slug": "tostring"
        },
        {
          "name": "toFixed",
          "signature": "(fractionDigits?: number | undefined) => string",
          "parameters": [
            {
              "name": "fractionDigits",
              "docs": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.",
              "type": "number | undefined"
            }
          ],
          "returns": "string",
          "tags": [
            {
              "name": "param",
              "text": "fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
            }
          ],
          "docs": "Returns a string representing a number in fixed-point notation.",
          "complexTypes": [],
          "slug": "tofixed"
        },
        {
          "name": "toExponential",
          "signature": "(fractionDigits?: number | undefined) => string",
          "parameters": [
            {
              "name": "fractionDigits",
              "docs": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.",
              "type": "number | undefined"
            }
          ],
          "returns": "string",
          "tags": [
            {
              "name": "param",
              "text": "fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
            }
          ],
          "docs": "Returns a string containing a number represented in exponential notation.",
          "complexTypes": [],
          "slug": "toexponential"
        },
        {
          "name": "toPrecision",
          "signature": "(precision?: number | undefined) => string",
          "parameters": [
            {
              "name": "precision",
              "docs": "Number of significant digits. Must be in the range 1 - 21, inclusive.",
              "type": "number | undefined"
            }
          ],
          "returns": "string",
          "tags": [
            {
              "name": "param",
              "text": "precision Number of significant digits. Must be in the range 1 - 21, inclusive."
            }
          ],
          "docs": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
          "complexTypes": [],
          "slug": "toprecision"
        },
        {
          "name": "valueOf",
          "signature": "() => number",
          "parameters": [],
          "returns": "number",
          "tags": [],
          "docs": "Returns the primitive value of the specified object.",
          "complexTypes": [],
          "slug": "valueof"
        }
      ],
      "properties": []
    }
  ],
  "enums": [],
  "typeAliases": [],
  "pluginConfigs": []
}