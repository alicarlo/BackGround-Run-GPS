{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAuB,MAAM,iBAAiB,CAAC;AAOjE,MAAM,OAAO,gBAAiB,SAAQ,SAAS;IAC7C,KAAK,CAAC,IAAI,CAAC,OAA0B;QACnC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAC7B,OAAO,OAAO,CAAC;IACjB,CAAC;IAEF,KAAK,CAAC,0BAA0B,CAAC,OAAmB;QACjD,OAAO,OAAO,CAAC;IACjB,CAAC;IAEF,KAAK,CAAC,uBAAuB;QAC1B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC3C,mEAAmE;IACrE,CAAC;IAEF,KAAK,CAAC,2BAA2B;QAC9B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC3C,mEAAmE;IACrE,CAAC;IAEF,KAAK,CAAC,wBAAwB;QAC3B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC3C,mEAAmE;IACrE,CAAC;IAEF,KAAK,CAAC,uBAAuB,CAAC,OAA2B;QACxD,OAAO,OAAO,CAAC;IACf,CAAC;IAEF,KAAK,CAAC,mCAAmC;QACtC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC3C,mEAAmE;IACrE,CAAC;IAEF,KAAK,CAAC,oBAAoB;QACvB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC3C,mEAAmE;IACrE,CAAC;IAGF;;OAEG;IAEH,WAAW,CAAC,SAAiB,EAAE,YAAsC;QAClE,MAAM,oBAAoB,GAAyB;YACpD,MAAM,EAAE,GAAG,EAAE;gBACX,MAAM,CAAC,mBAAmB,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;gBACpD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;YAC3B,CAAC;SACF,CAAC;QAEF,OAAO,OAAO,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;IAC5C,CAAC;IAEF,KAAK,CAAC,2BAA2B;QAC9B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC3C,mEAAmE;IACrE,CAAC;IAEF,KAAK,CAAC,6BAA6B;QAChC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC3C,mEAAmE;IACrE,CAAC;IAEF,KAAK,CAAC,0CAA0C,CAAC,OAA2B;QAC3E,OAAO,OAAO,CAAC;IACf,CAAC;IAEF,KAAK,CAAC,mCAAmC,CAAC,OAA2B;QAClE,OAAO,OAAO,CAAC;IACjB,CAAC;IAEF,KAAK,CAAC,eAAe;QAClB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC3C,mEAAmE;IACrE,CAAC;IAEF,KAAK,CAAC,eAAe;QAClB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC3C,mEAAmE;IACrE,CAAC;CAGF","sourcesContent":["import { WebPlugin,PluginListenerHandle } from '@capacitor/core';\n// import { App } from '@capacitor/app';\n// import { LocalNotifications, LocalNotificationSchema } from '@capacitor/local-notifications';\n// const { App, LocalNotifications } = Plugins;\nimport type { backgroundrunPlugin, GpsOptions } from './definitions';\n\n\nexport class backgroundrunWeb extends WebPlugin implements backgroundrunPlugin {\n  async echo(options: { value: string }): Promise<{ value: string }> {\n    console.log('ECHO', options);\n    return options;\n  }\n\n\tasync showNotificationOnAppClose(options: GpsOptions): Promise<GpsOptions> {\n    return options;\n  }\n\n\tasync stopNotificationService(): Promise<void> {\n    throw new Error('Method not implemented.');\n    // Implementa aquí la lógica para mostrar la notificación en la web\n  }\n\n\tasync checkNotificationPermission(): Promise<void> {\n    throw new Error('Method not implemented.');\n    // Implementa aquí la lógica para mostrar la notificación en la web\n  }\n\n\tasync openNotificationSettings(): Promise<void> {\n    throw new Error('Method not implemented.');\n    // Implementa aquí la lógica para mostrar la notificación en la web\n  }\n\n\tasync checkPermissionsService(options: { value: boolean }): Promise<{ value: boolean }> {\n\t\treturn options;\n  }\n\n\tasync ignoringBatteryOptimizationsService(): Promise<void> {\n    throw new Error('Method not implemented.');\n    // Implementa aquí la lógica para mostrar la notificación en la web\n  }\n\n\tasync openLocationSettings(): Promise<void> {\n    throw new Error('Method not implemented.');\n    // Implementa aquí la lógica para mostrar la notificación en la web\n  }\n\n\n\t/*async addAppResumedListener(callback: () => void): Promise<void> {\n\t\tcallback();\n\t}*/\n\n\taddListener(eventName: string, listenerFunc: (...args: any[]) => void): Promise<PluginListenerHandle> {\n    const pluginListenerHandle: PluginListenerHandle = {\n\t\t\tremove: () => {\n\t\t\t\t\twindow.removeEventListener(eventName, listenerFunc);\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t}\n\t};\n\n\treturn Promise.resolve(pluginListenerHandle);\n  }\n\n\tasync requestBatteryOptimizations(): Promise<void> {\n    throw new Error('Method not implemented.');\n    // Implementa aquí la lógica para mostrar la notificación en la web\n  }\n\t\n\tasync requestNotificationPermission(): Promise<void> {\n    throw new Error('Method not implemented.');\n    // Implementa aquí la lógica para mostrar la notificación en la web\n  }\n\n\tasync checkUsageStatsNotificationPausePermission(options: { value: boolean }): Promise<{ value: boolean }> {\n\t\treturn options;\n  }\n\n\tasync checkManageAppPermissionsPermission(options: { value: boolean }): Promise<{ value: boolean }> {\n    return options;\n  }\n\n\tasync acquireWakeLock(): Promise<void> {\n    throw new Error('Method not implemented.');\n    // Implementa aquí la lógica para mostrar la notificación en la web\n  }\n\n\tasync releaseWakeLock(): Promise<void> {\n    throw new Error('Method not implemented.');\n    // Implementa aquí la lógica para mostrar la notificación en la web\n  }\n\n\n}\n"]}