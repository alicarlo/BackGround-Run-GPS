{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAwB,SAAS,EAAC,MAAM,iBAAiB,CAAC;AAOjE,MAAM,OAAO,gBAAiB,SAAQ,SAAS;IAC7C,KAAK,CAAC,IAAI,CAAC,OAA0B;QACnC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAC7B,OAAO,OAAO,CAAC;IACjB,CAAC;IAEF,KAAK,CAAC,0BAA0B,CAAC,OAAmB;QACjD,OAAO,OAAO,CAAC;IACjB,CAAC;IAEF,KAAK,CAAC,uBAAuB;QAC1B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC3C,mEAAmE;IACrE,CAAC;IAEF,KAAK,CAAC,2BAA2B;QAC9B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC3C,mEAAmE;IACrE,CAAC;IAEF,KAAK,CAAC,wBAAwB;QAC3B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC3C,mEAAmE;IACrE,CAAC;IAEF,KAAK,CAAC,uBAAuB,CAAC,OAA2B;QACxD,OAAO,OAAO,CAAC;IACf,CAAC;IAEF,KAAK,CAAC,mCAAmC;QACtC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC3C,mEAAmE;IACrE,CAAC;IAEF,KAAK,CAAC,oBAAoB;QACvB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC3C,mEAAmE;IACrE,CAAC;IAGF;;OAEG;IAEH,KAAK,CAAC,qBAAqB;QACxB,MAAM,CAAC,gBAAgB,CAAC,YAAY,EAAE,GAAG,EAAE;YACzC,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QACH,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAEF,KAAK,CAAC,WAAW,CAAC,SAAiB,EAAE,YAAsC;QACxE,MAAM,oBAAoB,GAAyB;YACjD,MAAM,EAAE,GAAG,EAAE;gBACX,MAAM,CAAC,mBAAmB,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;gBACpD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;YAC3B,CAAC;SACF,CAAC;QACF,OAAO,OAAO,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;IAC/C,CAAC;IAGF,KAAK,CAAC,uBAAuB;QAC1B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC3C,mEAAmE;IACrE,CAAC;IAEF,KAAK,CAAC,2BAA2B;QAC9B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC3C,mEAAmE;IACrE,CAAC;IAEF,KAAK,CAAC,6BAA6B;QAChC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC3C,mEAAmE;IACrE,CAAC;IAEF,KAAK,CAAC,0CAA0C,CAAC,OAA2B;QAC3E,OAAO,OAAO,CAAC;IACf,CAAC;IAEF,KAAK,CAAC,mCAAmC,CAAC,OAA2B;QAClE,OAAO,OAAO,CAAC;IACjB,CAAC;IAEF,KAAK,CAAC,eAAe;QAClB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC3C,mEAAmE;IACrE,CAAC;IAEF,KAAK,CAAC,eAAe;QAClB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC3C,mEAAmE;IACrE,CAAC;IAGF,KAAK,CAAC,qBAAqB,CAAC,OAA2B;QACtD,OAAO,OAAO,CAAC;IACf,CAAC;IAEF,KAAK,CAAC,yBAAyB,CAAC,OAA2B;QAC1D,OAAO,OAAO,CAAC;IACf,CAAC;IAEF,KAAK,CAAC,oBAAoB,CAAC,OAA2B;QACrD,OAAO,OAAO,CAAC;IACf,CAAC;CAEF","sourcesContent":["import { PluginListenerHandle, WebPlugin} from '@capacitor/core';\r\n// import { App } from '@capacitor/app';\r\n// import { LocalNotifications, LocalNotificationSchema } from '@capacitor/local-notifications';\r\n// const { App, LocalNotifications } = Plugins;\r\nimport type { backgroundrunPlugin, GpsOptions } from './definitions';\r\n\r\n\r\nexport class backgroundrunWeb extends WebPlugin implements backgroundrunPlugin {\r\n  async echo(options: { value: string }): Promise<{ value: string }> {\r\n    console.log('ECHO', options);\r\n    return options;\r\n  }\r\n\r\n\tasync showNotificationOnAppClose(options: GpsOptions): Promise<GpsOptions> {\r\n    return options;\r\n  }\r\n\r\n\tasync stopNotificationService(): Promise<void> {\r\n    throw new Error('Method not implemented.');\r\n    // Implementa aquí la lógica para mostrar la notificación en la web\r\n  }\r\n\r\n\tasync checkNotificationPermission(): Promise<void> {\r\n    throw new Error('Method not implemented.');\r\n    // Implementa aquí la lógica para mostrar la notificación en la web\r\n  }\r\n\r\n\tasync openNotificationSettings(): Promise<void> {\r\n    throw new Error('Method not implemented.');\r\n    // Implementa aquí la lógica para mostrar la notificación en la web\r\n  }\r\n\r\n\tasync checkPermissionsService(options: { value: boolean }): Promise<{ value: boolean }> {\r\n\t\treturn options;\r\n  }\r\n\r\n\tasync ignoringBatteryOptimizationsService(): Promise<void> {\r\n    throw new Error('Method not implemented.');\r\n    // Implementa aquí la lógica para mostrar la notificación en la web\r\n  }\r\n\r\n\tasync openLocationSettings(): Promise<void> {\r\n    throw new Error('Method not implemented.');\r\n    // Implementa aquí la lógica para mostrar la notificación en la web\r\n  }\r\n\r\n\r\n\t/*async addAppResumedListener(callback: () => void): Promise<void> {\r\n\t\tcallback();\r\n\t}*/\r\n\r\n\tasync addAppResumedListener(): Promise<void> {\r\n    window.addEventListener('appResumed', () => {\r\n      this.notifyListeners('appResumed', {});\r\n    });\r\n    return Promise.resolve();\r\n  }\r\n\r\n\tasync addListener(eventName: string, listenerFunc: (...args: any[]) => void): Promise<PluginListenerHandle> {\r\n    const pluginListenerHandle: PluginListenerHandle = {\r\n      remove: () => {\r\n        window.removeEventListener(eventName, listenerFunc);\r\n        return Promise.resolve();\r\n      }\r\n    };\r\n    return Promise.resolve(pluginListenerHandle);\r\n  }\r\n\r\n\r\n\tasync clearAppResumedListener(): Promise<void> {\r\n    throw new Error('Method not implemented.');\r\n    // Implementa aquí la lógica para mostrar la notificación en la web\r\n  }\r\n\r\n\tasync requestBatteryOptimizations(): Promise<void> {\r\n    throw new Error('Method not implemented.');\r\n    // Implementa aquí la lógica para mostrar la notificación en la web\r\n  }\r\n\t\r\n\tasync requestNotificationPermission(): Promise<void> {\r\n    throw new Error('Method not implemented.');\r\n    // Implementa aquí la lógica para mostrar la notificación en la web\r\n  }\r\n\r\n\tasync checkUsageStatsNotificationPausePermission(options: { value: boolean }): Promise<{ value: boolean }> {\r\n\t\treturn options;\r\n  }\r\n\r\n\tasync checkManageAppPermissionsPermission(options: { value: boolean }): Promise<{ value: boolean }> {\r\n    return options;\r\n  }\r\n\r\n\tasync acquireWakeLock(): Promise<void> {\r\n    throw new Error('Method not implemented.');\r\n    // Implementa aquí la lógica para mostrar la notificación en la web\r\n  }\r\n\r\n\tasync releaseWakeLock(): Promise<void> {\r\n    throw new Error('Method not implemented.');\r\n    // Implementa aquí la lógica para mostrar la notificación en la web\r\n  }\r\n\r\n\r\n\tasync checkPermissionCamera(options: { value: boolean }): Promise<{ value: boolean }> {\r\n\t\treturn options;\r\n  }\r\n\t\r\n\tasync checkPermissionMicroPhone(options: { value: boolean }): Promise<{ value: boolean }> {\r\n\t\treturn options;\r\n  }\r\n\t\r\n\tasync checkPermissionAudio(options: { value: boolean }): Promise<{ value: boolean }> {\r\n\t\treturn options;\r\n  }\r\n\r\n}\r\n"]}